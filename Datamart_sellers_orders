CREATE OR REPLACE TABLE EXPLOTACION.STAGING_DM_SELLERS_ORDERS
PARTITION BY
  RANGE_BUCKET(CUS_CUST_ID, GENERATE_ARRAY(0, 100000000000, 10000000))
CLUSTER BY SIT_SITE_ID, CUS_CUST_ID
AS (
    SELECT *,
    CASE WHEN SHARE_FBM>SHARE_FLEX AND SHARE_FBM>SHARE_DS AND SHARE_FBM>SHARE_XD AND SHARE_FBM>SHARE_OTHER_ME2 AND SHARE_FBM>SHARE_ME1 AND SHARE_FBM>SHARE_PUIS AND SHARE_FBM>SHARE_OTHER THEN 'FBM'
    WHEN SHARE_FLEX>SHARE_FBM AND SHARE_FLEX>SHARE_DS AND SHARE_FLEX>SHARE_XD AND SHARE_FLEX>SHARE_OTHER_ME2 AND SHARE_FLEX>SHARE_ME1 AND SHARE_FLEX>SHARE_PUIS AND SHARE_FLEX>SHARE_OTHER THEN 'FLEX'
    WHEN SHARE_DS>SHARE_FBM AND SHARE_DS>SHARE_FLEX AND SHARE_DS>SHARE_XD AND SHARE_DS>SHARE_OTHER_ME2 AND SHARE_DS>SHARE_ME1 AND SHARE_DS>SHARE_PUIS AND SHARE_DS>SHARE_OTHER THEN 'DS'
    WHEN SHARE_XD>SHARE_FBM AND SHARE_XD>SHARE_FLEX AND SHARE_XD>SHARE_DS AND SHARE_XD>SHARE_OTHER_ME2 AND SHARE_XD>SHARE_ME1 AND SHARE_XD>SHARE_PUIS AND SHARE_XD>SHARE_OTHER THEN 'XD'
    WHEN SHARE_OTHER_ME2>SHARE_FBM AND SHARE_OTHER_ME2>SHARE_FLEX AND SHARE_OTHER_ME2>SHARE_DS AND SHARE_OTHER_ME2>SHARE_XD AND SHARE_OTHER_ME2>SHARE_ME1 AND SHARE_OTHER_ME2>SHARE_PUIS AND SHARE_OTHER_ME2>SHARE_OTHER THEN 'OTHER_M2'
    WHEN SHARE_ME1>SHARE_FBM AND SHARE_ME1>SHARE_FLEX AND SHARE_ME1>SHARE_DS AND SHARE_ME1>SHARE_XD AND SHARE_ME1>SHARE_OTHER_ME2 AND SHARE_ME1>SHARE_PUIS AND SHARE_ME1>SHARE_OTHER THEN 'ME1'
    WHEN SHARE_PUIS>SHARE_FBM AND SHARE_PUIS>SHARE_FLEX AND SHARE_PUIS>SHARE_DS AND SHARE_PUIS>SHARE_XD AND SHARE_PUIS>SHARE_OTHER_ME2 AND SHARE_PUIS>SHARE_ME1 AND SHARE_PUIS>SHARE_OTHER THEN 'PUIS'
    WHEN SHARE_OTHER>SHARE_FBM AND SHARE_OTHER>SHARE_FLEX AND SHARE_OTHER>SHARE_DS AND SHARE_OTHER>SHARE_XD AND SHARE_OTHER>SHARE_OTHER_ME2 AND SHARE_OTHER>SHARE_ME1 AND SHARE_OTHER>SHARE_PUIS THEN 'OTHER' END SHIPPING_TYPE_WINNER
    FROM (

    SELECT SIT_SITE_ID, 
        ORD_SELLER.ID CUS_CUST_ID,
        MIN(DATE(ORD_CLOSED_DTTM)) CUS_FIRST_SELL,
        DATE_DIFF(CURRENT_DATE, MIN(DATE(ORD_CLOSED_DTTM)), DAY) as DAYS_FIRST_SELL,
        CAST (SUM(ORD_ITEM.QTY * ORD_ITEM.UNIT_PRICE) AS FLOAT64 ) AS GMV_LC,
        CAST (SUM(CASE WHEN DATE(ORD_CLOSED_DTTM) >= current_date()-7 AND DATE(ORD_CLOSED_DTTM)< current_date()THEN (ORD_ITEM.QTY * ORD_ITEM.UNIT_PRICE) END)AS FLOAT64) AS GMV_LC_LAST_7DAYS,
        CAST (SUM(CASE WHEN DATE(ORD_CLOSED_DTTM) >= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date()THEN (ORD_ITEM.QTY * ORD_ITEM.UNIT_PRICE) END)AS FLOAT64) AS GMV_LC_LAST_30DAYS,
        CAST (SUM(CASE WHEN DATE(ORD_CLOSED_DTTM) >= current_date()-180 AND DATE(ORD_CLOSED_DTTM)< current_date()THEN (ORD_ITEM.QTY * ORD_ITEM.UNIT_PRICE) END)AS FLOAT64) AS GMV_LC_LAST_180DAYS,
        SAFE_DIVIDE(CAST (SUM(ORD_ITEM.QTY * ORD_ITEM.UNIT_PRICE) AS FLOAT64 ),SUM(ORD_ITEM.QTY) ) ASP_LC,
        CAST (SUM(ORD_ITEM.QTY * ORD_ITEM.UNIT_PRICE * CC_USD_RATIO )AS FLOAT64) AS GMV,
        CAST (SUM(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-7 AND DATE(ORD_CLOSED_DTTM)< current_date()THEN (ORD_ITEM.QTY * ORD_ITEM.UNIT_PRICE * CC_USD_RATIO) END)AS FLOAT64) AS GMV_LAST_7DAYS,
        CAST (SUM(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date()THEN (ORD_ITEM.QTY * ORD_ITEM.UNIT_PRICE * CC_USD_RATIO) END)AS FLOAT64) AS GMV_LAST_30DAYS,
        CAST (SUM(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-180 AND DATE(ORD_CLOSED_DTTM)< current_date()THEN (ORD_ITEM.QTY * ORD_ITEM.UNIT_PRICE * CC_USD_RATIO) END)AS FLOAT64) AS GMV_LAST_180DAYS,
        (CAST (SUM(CASE WHEN DATE(ORD_CLOSED_DTTM)>=DATE_ADD(CURRENT_DATE, INTERVAL -12 MONTH) AND DATE(ORD_CLOSED_DTTM)< current_date()THEN (ORD_ITEM.QTY * ORD_ITEM.UNIT_PRICE) END)AS FLOAT64)/
        CAST (SUM(CASE WHEN  DATE(ORD_CLOSED_DTTM)>=DATE_ADD(CURRENT_DATE, INTERVAL -24 MONTH) AND DATE(ORD_CLOSED_DTTM)< DATE_ADD(CURRENT_DATE, INTERVAL -12 MONTH) THEN (ORD_ITEM.QTY * ORD_ITEM.UNIT_PRICE) END)AS FLOAT64) )-1 as TGMV_LC_YOY,
        (CAST (SUM(CASE WHEN DATE(ORD_CLOSED_DTTM)>=DATE_ADD(CURRENT_DATE, INTERVAL -12 MONTH) AND DATE(ORD_CLOSED_DTTM)< current_date()THEN (ORD_ITEM.QTY * ORD_ITEM.UNIT_PRICE * CC_USD_RATIO) END)AS FLOAT64)/
        CAST (SUM(CASE WHEN  DATE(ORD_CLOSED_DTTM)>=DATE_ADD(CURRENT_DATE, INTERVAL -24 MONTH) AND DATE(ORD_CLOSED_DTTM)< DATE_ADD(CURRENT_DATE, INTERVAL -12 MONTH) THEN (ORD_ITEM.QTY * ORD_ITEM.UNIT_PRICE * CC_USD_RATIO) END)AS FLOAT64) )-1 as TGMV_USD_YOY,
        SAFE_DIVIDE(CAST (SUM(ORD_ITEM.QTY * ORD_ITEM.UNIT_PRICE * CC_USD_RATIO )AS FLOAT64),SUM(ORD_ITEM.QTY) ) ASP,
        SUM((ORD_ITEM.QTY)) AS SI,
        SUM(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-7 AND DATE(ORD_CLOSED_DTTM)< current_date()THEN (ORD_ITEM.QTY) END) AS SI_LAST_7DAYS,
        SUM(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date()THEN (ORD_ITEM.QTY) END) AS SI_LAST_30DAYS,
        case when COUNT(DISTINCT ORD_ORDER_ID) >= 1 then true else false end as FIRST_TIME_SELLER,
        COUNT(DISTINCT  ORD_ORDER_ID) AS ORDERS,
        COUNT(DISTINCT case when DATE(ORD_CLOSED_DTTM) >= current_date()-7 AND DATE(ORD_CLOSED_DTTM) < current_date() then ORD_ORDER_ID END) AS ORDERS_LAST_7DAYS,
        COUNT(DISTINCT case when DATE(ORD_CLOSED_DTTM) >= current_date()-30 AND DATE(ORD_CLOSED_DTTM) < current_date() then ORD_ORDER_ID END) AS ORDERS_LAST_30DAYS,
        COUNT(CASE WHEN ORD_SHIPPING.MODE != 'custom' THEN ORD_ORDER_ID END) ORDERS_SHIPPED,
        COUNT(CASE WHEN ORD_SHIPPING.MODE != 'custom' AND DATE(ORD_CLOSED_DTTM) >= current_date()-7 AND DATE(ORD_CLOSED_DTTM) < current_date() THEN ORD_ORDER_ID END) ORDERS_SHIPPED_LAST_7DAYS,
        COUNT(CASE WHEN ORD_SHIPPING.MODE != 'custom' AND DATE(ORD_CLOSED_DTTM) >= current_date()-30 AND DATE(ORD_CLOSED_DTTM) < current_date() THEN ORD_ORDER_ID END) ORDERS_SHIPPED_LAST_30DAYS,
        CASE WHEN COUNT(DISTINCT  ORD_ORDER_ID)>=10 then true else false end as REPUTATION_CALCULATED,
        SUM(CASE WHEN ORD_SHIPPING.LOGISTIC_TYPE = 'fulfillment' then ORD_ITEM.QTY END ) SI_FULL,
        SUM(CASE WHEN ORD_SHIPPING.LOGISTIC_TYPE in ('drop_off', 'xd_drop_off', 'fulfillment', 'cross_docking', 'self_service') then ORD_ITEM.QTY END ) SI_SHIPPED,
        SUM(CASE WHEN ORD_SHIPPING.LOGISTIC_TYPE in ( 'fulfillment', 'self_service') then ORD_ITEM.QTY END ) /SUM(CASE WHEN ORD_SHIPPING.LOGISTIC_TYPE in ('drop_off', 'xd_drop_off', 'fulfillment', 'self_service') then ORD_ITEM.QTY END )SI_FBM,
        COUNT(DISTINCT CASE WHEN ORD_SHIPPING.LOGISTIC_TYPE = 'fulfillment' AND DATE(ORD_CLOSED_DTTM) >= current_date()-365 AND DATE(ORD_CLOSED_DTTM)< current_date() THEN ORD_ORDER_ID END) N_FBM_ORDERS,
        COUNT(DISTINCT CASE WHEN ORD_SHIPPING.LOGISTIC_TYPE = 'fulfillment' AND DATE(ORD_CLOSED_DTTM) >= current_date()-90 AND DATE(ORD_CLOSED_DTTM)< current_date() THEN ORD_ORDER_ID END) N_FBM_ORDERS_LAST_90DAYS,
        SUM(CASE WHEN 'mshops' IN UNNEST(ORD_TAGS) AND ORD_GMV_FLG = TRUE THEN ORD_ITEM.QTY*ORD_ITEM.unit_price END) GMV_LC_MSHOPS,
        SUM(CASE WHEN 'mshops' IN UNNEST(ORD_TAGS) AND ORD_GMV_FLG = TRUE THEN ORD_ITEM.QTY*ORD_ITEM.unit_price*CC_USD_RATIO END) GMV_MSHOPS,
        SUM(CASE WHEN 'mshops' IN UNNEST(ORD_TAGS) AND ORD_GMV_FLG = TRUE THEN ORD_ITEM.QTY END) SI_MSHOPS,
        COUNT(DISTINCT CASE WHEN 'mshops' IN UNNEST(ORD_TAGS) AND ORD_GMV_FLG = TRUE THEN ORD_ORDER_ID END) ORDERS_MSHOPS,
        COUNT(DISTINCT ITE_ITEM_ID) N_SUCCESSFUL_LISTINGS,
        COUNT(DISTINCT case when DATE(ORD_CLOSED_DTTM) >= current_date()-30 AND DATE(ORD_CLOSED_DTTM) < current_date() then ITE_ITEM_ID end) N_SUCCESSFUL_LISTINGS_L30D,
        SAFE_DIVIDE(COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date() AND ORD_SHIPPING.LOGISTIC_TYPE = 'fulfillment' then ORD_ORDER_ID END ),
        COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date()  THEN ORD_ORDER_ID END ) ) SHARE_FBM,
        SAFE_DIVIDE(COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date() AND ORD_SHIPPING.LOGISTIC_TYPE = 'self_service' then ORD_ORDER_ID END ),
        COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date()  THEN ORD_ORDER_ID END ) ) SHARE_FLEX,
        SAFE_DIVIDE(COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date() AND ORD_SHIPPING.LOGISTIC_TYPE = 'drop_off' then ORD_ORDER_ID END ),
        COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date()  THEN ORD_ORDER_ID END )) SHARE_DS,
        SAFE_DIVIDE(COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date() AND ORD_SHIPPING.LOGISTIC_TYPE in ('xd_drop_off','cross_docking') then ORD_ORDER_ID END ),
        COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date()  THEN ORD_ORDER_ID END ) ) SHARE_XD,
        SAFE_DIVIDE(COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date() AND ORD_SHIPPING.LOGISTIC_TYPE not in ('xd_drop_off','cross_docking','drop_off','self_service','fulfillment') then ORD_ORDER_ID END ),
        COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date()  THEN ORD_ORDER_ID END ) ) SHARE_OTHER_ME2,
        SAFE_DIVIDE(COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date() AND ORD_SHIPPING.MODE ='me1' then ORD_ORDER_ID END ),
        COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date()  THEN ORD_ORDER_ID END )) SHARE_ME1,
        SAFE_DIVIDE(COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date() AND ORD_PICKUP_ID IS NOT NULL then ORD_ORDER_ID  END ),
        COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date()  THEN ORD_ORDER_ID END ) ) SHARE_PUIS,
        SAFE_DIVIDE(COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date() AND ORD_SHIPPING.MODE NOT IN ('me1','me2')  then ORD_ORDER_ID END ),
        COUNT(CASE WHEN DATE(ORD_CLOSED_DTTM)>= current_date()-30 AND DATE(ORD_CLOSED_DTTM)< current_date()  THEN ORD_ORDER_ID END ) ) SHARE_OTHER

        

    FROM  `meli-bi-data.WHOWNER.BT_ORD_ORDERS` 
    WHERE SIT_SITE_ID IN ('MLA','MLC','MLB','MLM','MLU','MCO','MPE','MLV')
        AND ORD_TGMV_FLG =TRUE
    GROUP BY 1,2

    )
);


CREATE OR REPLACE TABLE EXPLOTACION.STAGING_DM_SELLERS_ORDERS_UNNEST
PARTITION BY
  RANGE_BUCKET(CUS_CUST_ID, GENERATE_ARRAY(0, 100000000000, 10000000))
CLUSTER BY SIT_SITE_ID, CUS_CUST_ID
AS (
    SELECT SIT_SITE_ID,
        CUS_CUST_ID_SEL CUS_CUST_ID,
        COUNT(DISTINCT CASE WHEN REPU ='cancellations'AND  ORD_ORDER_CANCELLATION_TYPE ='seller_cancellation' AND ORD_CLOSED_DT >= current_date()-7 
        AND ORD_CLOSED_DT < current_date() AND ORD_ORDER_REPUTATION_IS_CONSIDERED_FLG ='true'  THEN  ORD_ORDER_CANCELLATION_REASON_NAME END) AS CANCELLATION_AFFECTED_REPU_SELLER_LAST_7DAYS, 
        COUNT(DISTINCT CASE WHEN REPU ='cancellations'AND  ORD_ORDER_CANCELLATION_TYPE ='seller_cancellation' AND ORD_CLOSED_DT >= current_date()-30 
        AND ORD_CLOSED_DT < current_date() AND ORD_ORDER_REPUTATION_IS_CONSIDERED_FLG ='true'  THEN  ORD_ORDER_CANCELLATION_REASON_NAME END) AS CANCELLATION_AFFECTED_REPU_SELLER_LAST_30DAYS, 
        COUNT(DISTINCT CASE WHEN REPU ='cancellations'AND  ORD_ORDER_CANCELLATION_TYPE ='buyer_cancellation' AND ORD_CLOSED_DT >= current_date()-7 
        AND ORD_CLOSED_DT < current_date() AND ORD_ORDER_REPUTATION_IS_CONSIDERED_FLG ='true'  THEN  ORD_ORDER_CANCELLATION_REASON_NAME END) AS CANCELLATION_AFFECTED_REPU_BUYER_LAST_7DAYS, 
        COUNT(DISTINCT CASE WHEN REPU ='cancellations'AND  ORD_ORDER_CANCELLATION_TYPE ='buyer_cancellation' AND ORD_CLOSED_DT >= current_date()-30
        AND ORD_CLOSED_DT < current_date() AND ORD_ORDER_REPUTATION_IS_CONSIDERED_FLG ='true'  THEN  ORD_ORDER_CANCELLATION_REASON_NAME END) AS CANCELLATION_AFFECTED_REPU_BUYER_LAST_30DAYS, 
        COUNT(DISTINCT CASE WHEN ORD_ORDER_CANCELLATION_TYPE ='seller_cancellation'
        AND ORD_CLOSED_DT>= current_date()-7 AND ORD_CLOSED_DT< current_date()THEN ORD_ORDER_CANCELLATION_REASON_NAME END) AS CANCELLATION_NO_AFFECTED_REPU_SELLER_LAST_7DAYS,
        COUNT(DISTINCT CASE WHEN ORD_ORDER_CANCELLATION_TYPE ='seller_cancellation'
        AND ORD_CLOSED_DT>= current_date()-30 AND ORD_CLOSED_DT< current_date()THEN ORD_ORDER_CANCELLATION_REASON_NAME END) AS CANCELLATION_NO_AFFECTED_REPU_SELLER_LAST_30DAYS,
        COUNT(DISTINCT CASE WHEN ORD_ORDER_CANCELLATION_TYPE ='buyer_cancellation'
        AND ORD_CLOSED_DT>= current_date()-7 AND ORD_CLOSED_DT< current_date()THEN ORD_ORDER_CANCELLATION_REASON_NAME END) AS CANCELLATION_NO_AFFECTED_REPU_BUYER_LAST_7DAYS,
        COUNT(DISTINCT CASE WHEN ORD_ORDER_CANCELLATION_TYPE ='buyer_cancellation'
        AND ORD_CLOSED_DT>= current_date()-30 AND ORD_CLOSED_DT< current_date()THEN ORD_ORDER_CANCELLATION_REASON_NAME END) AS CANCELLATION_NO_AFFECTED_REPU_BUYER_LAST_30DAYS,
        COUNT(DISTINCT CASE WHEN REPU ='claims' AND ORD_CLOSED_DT >= current_date()-7 AND ORD_CLOSED_DT < current_date() 
        and ORD_ORDER_REPUTATION_IS_CONSIDERED_FLG ='true'  THEN  CLA_CLAIM_ID END) AS CLAIMS_AFFECTED_REPU_LAST_7DAYS,
        COUNT(DISTINCT CASE WHEN REPU ='claims' AND ORD_CLOSED_DT >= current_date()-30 AND ORD_CLOSED_DT < current_date() 
        and ORD_ORDER_REPUTATION_IS_CONSIDERED_FLG ='true'  THEN  CLA_CLAIM_ID END) AS CLAIMS_AFFECTED_REPU_LAST_30DAYS,
        COUNT(DISTINCT CASE WHEN array_length(ORD_ORDER_CLAIMS)>0
        AND ORD_CLOSED_DT>= current_date()-7 AND ORD_CLOSED_DT< current_date()THEN CLA_CLAIM_ID END) AS CLAIMS_NO_AFFECTED_REPU_LAST_7DAYS,
        COUNT(DISTINCT CASE WHEN array_length(ORD_ORDER_CLAIMS)>0
        AND ORD_CLOSED_DT>= current_date()-30 AND ORD_CLOSED_DT< current_date()THEN CLA_CLAIM_ID END) AS CLAIMS_NO_AFFECTED_REPU_LAST_30DAYS,
        COUNT(DISTINCT CASE WHEN REPU ='claims' THEN  CLA_CLAIM_ID END) N_CLAIMS
    FROM `meli-bi-data.DATAMART.DM_ORD_ORDERS_SELLERS`
        LEFT JOIN UNNEST(ORD_ORDER_REPUTATION_AFFECTED_BY) REPU
        LEFT JOIN UNNEST(ORD_ORDER_CLAIMS) CLA
    WHERE ORD_CLOSED_DT >= current_date()-30 AND ORD_CLOSED_DT< current_date()
    GROUP BY 1,2
);

